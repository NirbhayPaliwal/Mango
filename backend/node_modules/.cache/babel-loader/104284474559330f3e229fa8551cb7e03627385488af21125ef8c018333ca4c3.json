{"ast":null,"code":"var _s = $RefreshSig$();\n// useAuth.js\nimport { useState, useEffect } from \"react\";\nimport Cookies from \"js-cookie\";\nconst useAuth = () => {\n  _s();\n  const [curr, setCurr] = useState(null);\n  const [whichUser, setWhichUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchData = async () => {\n    const token = Cookies.get(\"jwt\");\n    if (token) {\n      try {\n        const response = await fetch(\"http://localhost:5000/decode\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            token\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setCurr(data.decoded.user);\n        setWhichUser(data.decoded.flag);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    } else {\n      console.error(\"No JWT token found\");\n    }\n    setLoading(false);\n  };\n  fetchData();\n  return {\n    curr,\n    whichUser,\n    loading\n  };\n};\n_s(useAuth, \"fqyCOt48Qtk8mQClsQcfJ2h43mI=\");\nexport default useAuth;","map":{"version":3,"names":["useState","useEffect","Cookies","useAuth","_s","curr","setCurr","whichUser","setWhichUser","loading","setLoading","fetchData","token","get","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","decoded","user","flag","error","console"],"sources":["C:/Users/hp/Desktop/this/mango/src/useauth.js"],"sourcesContent":["// useAuth.js\r\nimport { useState, useEffect } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst useAuth = () => {\r\n  const [curr, setCurr] = useState(null);\r\n  const [whichUser, setWhichUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  \r\n    const fetchData = async () => {\r\n      const token = Cookies.get(\"jwt\");\r\n      if (token) {\r\n        try {\r\n          const response = await fetch(\"http://localhost:5000/decode\", {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ token }),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n          }\r\n\r\n          const data = await response.json();\r\n          setCurr(data.decoded.user);\r\n          setWhichUser(data.decoded.flag);\r\n        } catch (error) {\r\n          console.error(\"Error fetching data:\", error);\r\n        }\r\n      } else {\r\n        console.error(\"No JWT token found\");\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n\r\n  return { curr, whichUser, loading };\r\n};\r\n\r\nexport default useAuth;\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAE/B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAG1C,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,KAAK,GAAGV,OAAO,CAACW,GAAG,CAAC,KAAK,CAAC;IAChC,IAAID,KAAK,EAAE;MACT,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;UAC3DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAER;UAAM,CAAC;QAChC,CAAC,CAAC;QAEF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClClB,OAAO,CAACiB,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC;QAC1BlB,YAAY,CAACe,IAAI,CAACE,OAAO,CAACE,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC,MAAM;MACLC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAC;IACrC;IACAlB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAEDC,SAAS,CAAC,CAAC;EAEb,OAAO;IAAEN,IAAI;IAAEE,SAAS;IAAEE;EAAQ,CAAC;AACrC,CAAC;AAACL,EAAA,CArCID,OAAO;AAuCb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}